'''
Tests for the lecture question asking service.
'''
from questions import submit, like, dismiss, questions, clear
import questions as questions_module

from hypothesis import given, strategies

import pytest
import importlib

TEXT_GENERATOR=strategies.text(min_size=1, max_size=10, alphabet="abcdefghijklmnABCDEFGHIJKLMN")

def test_simple():
    clear()
    q1 = submit("How long is a piece of string?")
    q2 = submit("What's your shoe size?")
    like(q1)
    assert questions() == [
        {"id": q1, "question": "How long is a piece of string?", "likes": 1},
        {"id": q2, "question": "What's your shoe size?", "likes": 0}]

# Write your tests here
@given(strategies.lists(TEXT_GENERATOR, unique=True))
def test_submission(qs):
    importlib.reload(questions_module)
    clear()
    for q in qs:
        submit(q)

    actual = []
    for q in questions():
        actual.append(q["question"])

    assert sorted(qs) == sorted(actual)

@given(strategies.lists(strategies.tuples(TEXT_GENERATOR, strategies.integers(0,100)), unique=True))
def test_likes(qs):
    importlib.reload(questions_module)
    clear()
    for (q,l) in qs:
        id = submit(q)
        for _ in range(0,l):
            like(id)

    for q in questions():
        assert (q["question"], q["likes"]) in qs

def test_dismiss():
    importlib.reload(questions_module)
    clear()
    q1 = submit("What's in the exam?")
    q2 = submit("How many questions are there?")
    dismiss(q1)
    assert len(questions()) == 1
    assert questions()[0]["question"] == "How many questions are there?"

@given(strategies.lists(strategies.tuples(TEXT_GENERATOR, strategies.booleans()), unique=True, min_size=1))
def test_id_constancy(data):
    importlib.reload(questions_module)
    clear()
    qs, rs = list(zip(*data))
    ids = []
    for q in qs:
        ids.append(submit(q))

    for id, r in zip(ids,rs):
        if r:
            dismiss(id)

    for q in questions():
        assert (q["id"], False) in zip(ids, rs)

    for q in qs:
        submit(q)
    ids = [ q["id"] for q in questions() ]
    assert len(set(ids)) == len(ids)



@given(strategies.lists(strategies.tuples(TEXT_GENERATOR, strategies.integers(0,100)), unique=True))
def test_sorted(qs):
    importlib.reload(questions_module)
    clear()
    for (q,l) in qs:
        id = submit(q)
        for _ in range(0,l):
            like(id)

    prev = None
    ordered = True
    for q in questions():
        if prev:
            ordered = ordered and q["likes"] <= prev
        prev = q["likes"]

    assert ordered

def test_invalid_id():
    importlib.reload(questions_module)
    clear()
    with pytest.raises(KeyError):
        like(-1)

def test_short_question():
    with pytest.raises(ValueError):
        submit("")

def test_long_question():
    with pytest.raises(ValueError):
        submit("I'm a very long message with little substance, just like the reports students wrote as part of this course, or an HSC essay. This goes on for so long it makes me think I should have autogenerated it, or at least made the limit old twitter instead of new twitter. In fact, I'm not even sure if this is big enough.")

