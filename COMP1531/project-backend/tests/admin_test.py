import pytest
import requests
import json
from src import config
from tests.requests import *

##################################################
# Initial setup
# Defining frequently used constants and
# Reset the data generated by each test function
##################################################

INPUTERROR = 400
ACCESSERROR = 403
GLOBAL_OWNERS = 1
MEMBERS = 2

@pytest.fixture(scope="function")
def test_setup():
    requests.delete(config.url + 'clear/v1')
    # userA is the global_owner
    userA = json.loads(post_register('validemail@gmail.com', '123abc!@#', 'Zeal', 'Liang').text)
    userB = json.loads(post_register('validemail2@gmail.com', '123abc!@#', 'Hayden', 'Everest').text)
    userC = json.loads(post_register('validemail3@gmail.com', '123abc!@#', 'Kevin', 'Everest').text)
    userD = json.loads(post_register('validemail4@gmail.com', '123abc!@#', 'ZiYi', 'Liang').text)
    return { 'userA' : userA, 'userB' : userB, 'userC' : userC, 'userD' : userD }

##################################################
# user/remove Tests
##################################################

# Expect to see the name_first and name_last changed
def test_profile_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    user = test_setup['userB']
    delete_admin_user_remove(global_owner['token'], user['auth_user_id'])
    profile = json.loads(get_user_profile(global_owner['token'], user['auth_user_id']).text)
    assert profile['user']['name_first'] == 'Removed'
    assert profile['user']['name_last'] == 'user'

# Expect to see that after we delete this user should not be able to search
def test_users_all_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    user = test_setup['userB']
    delete_admin_user_remove(global_owner['token'], user['auth_user_id'])
    users = json.loads(get_users_all(user['token']).text)['users']
    for single in users:
        assert user['auth_user_id'] != single['u_id']

# Expect to see after we delete this user should
# not be able to search in the channel
def test_channels_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    user = test_setup['userB']
    channel = json.loads(post_channels_create(global_owner['token'], 'test', True).text)
    post_channel_invite(global_owner['token'], channel['channel_id'], user['auth_user_id'])
    delete_admin_user_remove(global_owner['token'], user['auth_user_id'])
    details = json.loads(get_channel_details(global_owner['token'], channel['channel_id']).text)
    for user_details in details['all_members']:
        assert user['auth_user_id'] != user_details['u_id']

# Expect to see after we delete this user should
# not be able to search in the channel
def test_channels_after_remove_user_more_members(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    userC = test_setup['userC']
    userD = test_setup['userD']
    channel = json.loads(post_channels_create(global_owner['token'], 'test', True).text)
    post_channel_invite(global_owner['token'], channel['channel_id'], userB['auth_user_id'])
    post_channel_invite(global_owner['token'], channel['channel_id'], userC['auth_user_id'])
    post_channel_invite(global_owner['token'], channel['channel_id'], userD['auth_user_id'])
    delete_admin_user_remove(global_owner['token'], userD['auth_user_id'])
    post_channel_add_owner(global_owner['token'], channel['channel_id'], userC['auth_user_id'])
    delete_admin_user_remove(global_owner['token'], userB['auth_user_id'])
    delete_admin_user_remove(global_owner['token'], userC['auth_user_id'])
    details = json.loads(get_channel_details(global_owner['token'], channel['channel_id']).text)
    for user_details in details['all_members']:
        assert userB['auth_user_id'] != user_details['u_id']
    for user_details in details['owner_members']:
        assert userC['auth_user_id'] != user_details['u_id']


# Expect to see after we delete this user should
# not be able to search in the dm
def test_DMs_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    userC = test_setup['userC']
    dm = json.loads(post_dm_create(global_owner['token'],
                                    [userB['auth_user_id'],
                                    userC['auth_user_id']]).text)
    delete_admin_user_remove(global_owner['token'], userB['auth_user_id'])
    details = json.loads(get_dm_details(global_owner['token'], dm['dm_id']).text)
    for user in details['members']:
        assert userB['auth_user_id'] != user['u_id']

# Expect to see after we delete this user should
# not be able to search in the dm
def test_DMs_after_remove_user_more_members(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    userC = test_setup['userC']
    userD = test_setup['userD']
    dm = json.loads(post_dm_create(userB['token'],
                                    [global_owner['auth_user_id'],
                                    userC['auth_user_id'], userD['auth_user_id']]).text)
    delete_admin_user_remove(global_owner['token'], userB['auth_user_id'])
    delete_admin_user_remove(global_owner['token'], userD['auth_user_id'])

    details = json.loads(get_dm_details(global_owner['token'], dm['dm_id']).text)
    for user in details['members']:
        assert userB['auth_user_id'] != user['u_id']
        assert userD['auth_user_id'] != user['u_id']

# Expect to see the messages in the channel changed after we delete this user
def test_channels_messages_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    user = test_setup['userB']
    channel = json.loads(post_channels_create(global_owner['token'], 'test', True).text)
    post_channel_invite(global_owner['token'], channel['channel_id'], user['auth_user_id'])
    post_message_send(user['token'], channel['channel_id'], 'This is a message')
    post_message_send(global_owner['token'], channel['channel_id'], 'This is a SECOND message')
    delete_admin_user_remove(global_owner['token'], user['auth_user_id'])
    messages = json.loads(get_channel_messages(global_owner['token'], channel['channel_id'], 0).text)
    assert messages['messages'][0]['message'] == 'Removed user'
    assert messages['messages'][1]['message'] == 'This is a SECOND message'

# Expect to see the messages in the dm changed after we delete this user
def test_DMs_messages_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    userC = test_setup['userC']
    dm = json.loads(post_dm_create(global_owner['token'],
                                   [userB['auth_user_id'],
                                    userC['auth_user_id']]).text)
    post_message_senddm(userB['token'], dm['dm_id'], 'This is a message')
    post_message_senddm(global_owner['token'], dm['dm_id'], 'This is a SECOND message')
    delete_admin_user_remove(global_owner['token'], userB['auth_user_id'])
    messages = json.loads(get_dm_messages(global_owner['token'], dm['dm_id'], 0).text)
    assert messages['messages'][1]['message']  == 'Removed user'
    assert messages['messages'][0]['message']  == 'This is a SECOND message'

# Expect to see the user's email and handle are
# reusable after we delete this user.
def test_reuse_email_and_handle_after_remove_user(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    delete_admin_user_remove(global_owner['token'], userB['auth_user_id'])
    userB = post_register('validemail2@gmail.com', '123abc!@#', 'Hayden', 'Everest')
    assert userB.status_code != INPUTERROR
    details = json.loads(get_user_profile(json.loads(userB.text)['token'], json.loads(userB.text)['auth_user_id']).text)['user']
    assert details['handle_str'] == 'haydeneverest'

# Expect to fail because the u_id does not refer to a valid user
# and u_id refers to a user who is the only global owner
def test_remove_user_InputError(test_setup):
    global_owner = test_setup['userA']
    assert delete_admin_user_remove(global_owner['token'], -1).status_code == INPUTERROR
    assert delete_admin_user_remove(global_owner['token'],
                                    global_owner['auth_user_id']).status_code == INPUTERROR

# Expect to fail because the authorised user is not a global owner
def test_remove_user_AccessError(test_setup):
    user = test_setup['userB']
    assert delete_admin_user_remove(user['token'],
                                    user['auth_user_id']).status_code == ACCESSERROR

# Expect to success two global owner case
def test_remove_user_two_global_owner_case(test_setup):
    global_ownerA = test_setup['userA']
    global_ownerB = test_setup['userB']
    post_admin_userpermission_change(global_ownerA['token'],
                                        global_ownerB['auth_user_id'],
                                        GLOBAL_OWNERS)
    assert delete_admin_user_remove(global_ownerA['token'],
                                    global_ownerB['auth_user_id']).status_code not in (INPUTERROR, ACCESSERROR)


##################################################
# userpermission/change Tests
##################################################

# Expect to successfully deleted userC since we have elevated userB to global owner
def test_userpermission_change(test_setup):
    global_owner = test_setup['userA']
    userB = test_setup['userB']
    userC = test_setup['userC']
    post_admin_userpermission_change(global_owner['token'],
                                        userB['auth_user_id'],
                                        GLOBAL_OWNERS)
    delete_admin_user_remove(userB['token'], userC['auth_user_id'])
    users = json.loads(get_users_all(userB['token']).text)['users']
    for user in users:
        assert userC['auth_user_id'] != user['u_id']

# Expect to fail because the u_id does not refer to a valid user
def test_userpermission_change_invalid_u_id(test_setup):
    global_owner = test_setup['userA']
    assert post_admin_userpermission_change(global_owner['token'],
                                            -1,
                                            GLOBAL_OWNERS).status_code == INPUTERROR

# Expect to fail because u_id refers to a user who is the
# only global owner and they are being demoted to a user
def test_userpermission_change_demoted_only_global_owner(test_setup):
    global_owner = test_setup['userA']
    assert post_admin_userpermission_change(global_owner['token'],
                                            global_owner['auth_user_id'],
                                            MEMBERS).status_code == INPUTERROR

# Expect to fail because permission_id is invalid
def test_userpermission_change_invalid_permission_id(test_setup):
    global_owner = test_setup['userA']
    user = test_setup['userB']
    assert post_admin_userpermission_change(global_owner['token'],
                                            user['auth_user_id'],
                                            -1).status_code == INPUTERROR

# Expect to fail because the authorised user is not a global owner
def test_userpermission_change_invalid_authorised_user(test_setup):
    user = test_setup['userB']
    assert post_admin_userpermission_change(user['token'],
                                            user['auth_user_id'],
                                            GLOBAL_OWNERS).status_code == ACCESSERROR