import pytest
import requests
import json
from src import config
from src.helper import decode_jwt
from tests.requests import *

##################################################
# Initial setup
# Defining frequently used constants and
# Reset the data generated by each test function
##################################################


@pytest.fixture(scope="function")
def test_setup():
    requests.delete(config.url + 'clear/v1')


##################################################
# auth_register_v2 Tests
##################################################

# Expect to match since all the info are correct
def test_register_handle(test_setup):
    user = json.loads(post_register('validemail@gmail.com', '123abc!@#', 'Hayden', 'Everest').text)
    channel = json.loads(post_channels_create(user['token'], 'test', True).text)
    details = json.loads(get_channel_details(user['token'], channel['channel_id']).text)
    assert details['owner_members'][0]['handle_str'] == 'haydeneverest'

# Expect to match since all the info are correct
def test_register_handle_long(test_setup):
    user = json.loads(post_register('validemail@gmail.com', '123abc!@#', 'Hayden', 'Everestaaaaaaaaaaaaaa').text)
    channel = json.loads(post_channels_create(user['token'], 'test', True).text)
    details = json.loads(get_channel_details(user['token'], channel['channel_id']).text)
    assert details['owner_members'][0]['handle_str'] == 'haydeneverestaaaaaaa'


# Expect to work with the duplicate name AND
# Expect to match since all the info are correct
def test_register_handle_multiple(test_setup):
    userA = json.loads(post_register('validemail1@gmail.com', '123abc!@#', 'Hayden', 'Everestaaaaaaaaaaaaaa').text)
    userB = json.loads(post_register('validemail2@gmail.com', '123abc!@#', 'Hayden', 'Everestaaaaaaaaaaaaaa').text)
    userC = json.loads(post_register('validemail3@gmail.com', '123abc!@#', 'Hayden', 'Everestaaaaaaaaaaaaaa').text)

    channelA = json.loads(post_channels_create(userA['token'], 'test1', True).text)
    channelB = json.loads(post_channels_create(userB['token'], 'test2', True).text)
    channelC = json.loads(post_channels_create(userC['token'], 'test3', True).text)

    detailsA = json.loads(get_channel_details(userA['token'], channelA['channel_id']).text)
    detailsB = json.loads(get_channel_details(userB['token'], channelB['channel_id']).text)
    detailsC = json.loads(get_channel_details(userC['token'], channelC['channel_id']).text)

    assert detailsA['owner_members'][0]['handle_str'] == 'haydeneverestaaaaaaa'
    assert detailsB['owner_members'][0]['handle_str'] == 'haydeneverestaaaaaaa0'
    assert detailsC['owner_members'][0]['handle_str'] == 'haydeneverestaaaaaaa1'


# Expect fail since the email entered is not a valid email
def test_register_invalid_email(test_setup):
    assert post_register('',                '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('abc123',          '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('ankitrai326.com', '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('@@@',             '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('zeal@',           '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('@zeal',           '123456', 'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('zeal@nodothere',  '123456', 'Zeal', 'Liang').status_code == INPUTERROR

# Expect fail since the email address is already being used by another user
def test_register_no_duplicate_email(test_setup):
    post_register('validemail@gmail.com', '123abc!@#', 'Hayden', 'Everest')
    assert post_register('validemail@gmail.com', '123abc!@#', 'Hayden', 'Everest').status_code == INPUTERROR

# Expect fail since the password is less than 6 characters
def test_register_invalid_password(test_setup):
    assert post_register('zeal@gmail.com', '',      'Zeal', 'Liang').status_code == INPUTERROR
    assert post_register('zeal@gmail.com', '12345', 'Zeal', 'Liang').status_code == INPUTERROR

# Expect fail since the length of name_first is not between 1 and 50 characters inclusive
def test_register_invalid_name_first(test_setup):
    long_str = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    assert post_register('zeal@gmail.com', '123456', '',       'Liang').status_code == INPUTERROR
    assert post_register('zeal@gmail.com', '123456', long_str, 'Liang').status_code == INPUTERROR

# Expect fail since the length of name_last  is not between 1 and 50 characters inclusive
def test_register_invalid_name_last(test_setup):
    long_str = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    assert post_register('zeal@gmail.com', '123456', 'Zeal', ''      ).status_code == INPUTERROR
    assert post_register('zeal@gmail.com', '123456', 'Zeal', long_str).status_code == INPUTERROR


##################################################
# auth_login_v2 Tests
##################################################

# Expect to match since we registered
def test_login(test_setup):
    respA = post_register('validemail@gmail.com', '123abc!@#', 'Zeal', 'Liang')
    respB = post_login('validemail@gmail.com', '123abc!@#')

    A = decode_jwt(json.loads(respA.text)['token'])
    B = decode_jwt(json.loads(respB.text)['token'])
    assert A['u_id'] == B['u_id'] and A['session_ids'] == B['session_ids'] - 1

# Expect fail since we never registered
def test_login_invalid_user(test_setup):
    assert post_login('validemail@gmail.com', '123abc!@#').status_code == INPUTERROR

# Expect fail since the password is wrong
def test_login_invalid_password(test_setup):
    post_register('validemail@gmail.com', '123abc!@#', 'Zeal', 'Liang')
    assert post_login('validemail@gmail.com', '123abc!!!').status_code == INPUTERROR

##################################################
# auth_logout_v1 Tests
##################################################

# Expect fail since we logout
def test_logout(test_setup):
    post_register('validemail@gmail.com', '123abc!@#', 'ZiYi', 'Liang')
    userB = json.loads(post_register('validemail2@gmail.com', '123abc!@#', 'Zeal', 'Liang').text)
    post_logout(userB['token'])
    assert post_channels_create(userB['token'], 'test', True).status_code == ACCESSERROR

# Expect ACCESSERROR since we already logout
def test_already_logged_out(test_setup):
    post_register('validemail@gmail.com', '123abc!@#', 'ZiYi', 'Liang')
    userB = json.loads(post_register('validemail2@gmail.com', '123abc!@#', 'Zeal', 'Liang').text)
    post_logout(userB['token'])
    assert post_logout(userB['token']).status_code == ACCESSERROR

##################################################
# auth_password_request_v1 Tests
##################################################

# Expect to work since all the info are correct
def test_password_request(test_setup):
    post_register('email@gmail.com', '123abc', 'Zeal', 'Liang')
    email = 'validemail@gmail.com'
    post_register(email, '123abc!@#', 'ZiYi', 'Liang')
    assert post_auth_passwordreset_request(email).status_code not in (INPUTERROR, ACCESSERROR)


##################################################
# auth_password_reset_v1 Tests
##################################################

# Expect to raise INPUTERROR since reset_code is not a valid reset code
def test_invalid_reset_code(test_setup):
    email = 'validemail@gmail.com'
    post_register(email, '123abc!@#', 'ZiYi', 'Liang')
    assert post_auth_passwordreset_reset('INVALID', '123456').status_code == INPUTERROR


# Expect to raise INPUTERROR since password entered is less than 6 characters long
def test_invalid_password(test_setup):
    email = 'validemail@gmail.com'
    user = post_register(email, '123abc!@#', 'ZiYi', 'Liang').json()
    post_auth_passwordreset_request(email)
    detail = get_user_profile(user['token'], user['auth_user_id']).json()
    reset_code = detail['user']['reset_code']
    assert post_auth_passwordreset_reset(reset_code, '123').status_code == INPUTERROR

# Expect to work since all the info are correct
def test_successful_reset(test_setup):
    email = 'validemail@gmail.com'
    new_password = '123456'
    user = post_register(email, '123abc!@#', 'ZiYi', 'Liang').json()
    post_auth_passwordreset_request(email)
    detail = get_user_profile(user['token'], user['auth_user_id']).json()
    reset_code = detail['user']['reset_code']
    assert post_auth_passwordreset_reset(reset_code, new_password).status_code not in (INPUTERROR, ACCESSERROR)
    assert post_login(email, new_password).status_code not in (INPUTERROR, ACCESSERROR)
