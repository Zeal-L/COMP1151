import pytest
import requests
import json
from src import config
import tests.requests as re
import time

##################################################
# Initial setup
# Defining frequently used constants and
# Reset the data generated by each test function
##################################################

INPUTERROR = 400
ACCESSERROR = 403

@pytest.fixture(scope="function")
def setup():
    requests.delete(config.url + 'clear/v1')
    # userA is the global_owner
    userA = json.loads(re.post_register('validemail@gmail.com', '123abc!@#', 'Zeal', 'Liang').text)
    userB = json.loads(re.post_register('validemail2@gmail.com', '123abc!@#', 'Hayden', 'Everest').text)
    userC = json.loads(re.post_register('validemail3@gmail.com', '123abc!@#', 'Kevin', 'Everest').text)
    re.post_channels_create(userC['token'], "channel", True)
    new_channel = json.loads(re.post_channels_create(userA['token'], "channel", True).text)
    return { 'userA' : userA, 'userB' : userB, 'userC' : userC, 'new_channel' : new_channel}

##################################################
# standup/start Tests
##################################################

# Expect to success since all the info are correct
def test_start_successful_start(setup):
    start_time = int(time.time())
    duration = 1
    resp = re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)
    assert json.loads(resp.text)['time_finish'] == start_time + duration
    assert resp.status_code not in (INPUTERROR, ACCESSERROR)

# Expect to raise INPUTERROR since channel_id are invalid
def test_start_invalid_channel_id(setup):
    resp = re.post_standup_start(setup['userA']['token'], -1, 3)
    assert resp.status_code == INPUTERROR

# Expect to raise INPUTERROR since length is a negative integer
def test_start_invalid_length(setup):
    resp = re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], -1)
    assert resp.status_code == INPUTERROR

# Expect to raise INPUTERROR since length is a negative integer
def test_start_invalid_length_not_integer(setup):
    resp = re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], '1')
    assert resp.status_code == INPUTERROR

# Expect to raise INPUTERROR since an active standup is currently running in the channel
def test_start_standup_already_running(setup):
    duration = 2
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)

    resp = re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)
    assert resp.status_code == INPUTERROR

# Expect to raise AccessError since the authorised user is not a member of the channel
def test_start_invalided_member(setup):
    resp = re.post_standup_start(setup['userB']['token'],
                                setup['new_channel']['channel_id'], 3)
    assert resp.status_code == ACCESSERROR



##################################################
# standup/active Tests
##################################################

# Expect to success since standup are running in the given channel
def test_active_active_standup(setup):
    start_time = int(time.time())
    duration = 2
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)
    resp = re.get_standup_active(setup['userA']['token'], setup['new_channel']['channel_id'])
    assert json.loads(resp.text)['time_finish'] == start_time + duration
    assert json.loads(resp.text)['is_active'] == True
    assert resp.status_code not in (INPUTERROR, ACCESSERROR)

# Expect to success since standup are finished in the given channel
def test_active_inactive_standup(setup):
    duration = 1
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)
    time.sleep(2)
    resp = re.get_standup_active(setup['userA']['token'],
                                setup['new_channel']['channel_id'])
    assert json.loads(resp.text)['time_finish'] == None
    assert json.loads(resp.text)['is_active'] == False
    assert resp.status_code not in (INPUTERROR, ACCESSERROR)

# Expect to raise INPUTERROR since channel_id are invalid
def test_active_invalid_channel_id(setup):
    resp = re.get_standup_active(setup['userA']['token'], -1)
    assert resp.status_code == INPUTERROR

# Expect to raise AccessError since the authorised user is not a member of the channel
def test_active_invalided_member(setup):
    resp = re.get_standup_active(setup['userB']['token'],
                                setup['new_channel']['channel_id'])
    assert resp.status_code == ACCESSERROR

##################################################
# standup/send Tests
##################################################

# Expect to success since all the info are correct
def test_send_successful_send(setup):
    duration = 2
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], duration)
    assert re.post_standup_send(setup['userA']['token'],
                                setup['new_channel']['channel_id'],
                                "test message 1").status_code not in (INPUTERROR, ACCESSERROR)
    assert re.post_standup_send(setup['userA']['token'],
                                setup['new_channel']['channel_id'],
                                "test message 2").status_code not in (INPUTERROR, ACCESSERROR)
    messages = json.loads(re.get_channel_messages(setup['userA']['token'],
                                                setup['new_channel']['channel_id'], 0).text)
    assert messages["messages"] == []
    time.sleep(duration+1)
    messages = json.loads(re.get_channel_messages(setup['userA']['token'],
                                                setup['new_channel']['channel_id'], 0).text)
    assert messages['messages'][0]['message'] == "test message 1"
    assert messages['messages'][1]['message'] == "test message 2"

# Expect to raise INPUTERROR since channel_id are invalid
def test_send_invalid_channel_id(setup):
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], 2)
    resp = re.post_standup_send(setup['userA']['token'],
                                -1,
                                "test message 1")
    assert resp.status_code == INPUTERROR

# Expect to raise INPUTERROR since length of message is over 1000 characters
def test_send_invalid_message(setup):
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], 2)
    super_long = ''
    for _ in range(1010):
        super_long += 'a'
    resp = re.post_standup_send(setup['userA']['token'],
                                setup['new_channel']['channel_id'],
                                super_long)
    assert resp.status_code == INPUTERROR

# Expect to raise INPUTERROR since an active standup is not currently running in the channel
def test_send_inactive_standup(setup):
    resp = re.post_standup_send(setup['userA']['token'],
                                setup['new_channel']['channel_id'],
                                "test message 1")
    assert resp.status_code == INPUTERROR

# Expect to raise AccessError since the authorised user is not a member of the channel
def test_send_invalided_member(setup):
    re.post_standup_start(setup['userA']['token'],
                                setup['new_channel']['channel_id'], 2)
    resp = re.post_standup_send(setup['userB']['token'],
                                setup['new_channel']['channel_id'],
                                "test message 1")
    assert resp.status_code == ACCESSERROR
