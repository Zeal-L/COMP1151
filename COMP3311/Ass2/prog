#!C:\Users\Zeal\AppData\Local\Programs\Python\Python39\python

#!/usr/bin/python3
# COMP3311 21T3 Ass2 ... progression check for a given student

import sys
import psycopg2
import re
from helpers import getStudent, getProgram, getStream

# define any local helper functions here
def read_rule(course_did, remained, rule):
        info = courses_detail(course_did, rule[0], rule[4], rule[1], rule[2], rule[3])
        temp = [rule[0], info["remaining"], info["curr_uoc"], info["min_req"], info["max_req"], rule[5], rule[3]]
        remained.append(temp)

def courses_detail(course_did, branchName, courses, min_req, max_req, branchType):
    remaining = []
    curr_uoc = 0
    for course in courses.split(','):
        if ';' not in course:
            original_course = course
            check = True
            # Free Electives case
            if 'FREE' in course:
                for did in course_did:
                    if len(did) == 8:
                        if did[4] == None or did[4] >= 50:
                            did.append('Free Electives')
                            curr_uoc += did[6]
                            check = False
                        if max_req and curr_uoc >= max_req:
                            break

            elif '#' in course and branchType == 'pattern':
                course = course.replace('#', '')
                for did in course_did:
                    if course in did[0] and len(did) == 8:
                        if did[4] == None or did[4] >= 50:
                            did.append(branchName)
                            curr_uoc += did[6]
                            check = False
                        if max_req and curr_uoc >= max_req:
                            break
            else:
                for did in course_did:
                    if course in did[0] and len(did) == 8:
                        if did[4] == None or did[4] >= 50:
                            did.append(branchName)
                            curr_uoc += did[6]
                            check = False
                    elif course in did[0] and len(did) == 9 and 'ADK' in branchName:
                        did[8] = did[8] + ' + ' + branchName
                        if did[4] == None or did[4] >= 50:
                            curr_uoc += did[6]
                            check = False
                        break
            if check:
                remaining.append(original_course)
        else:
            courses = course.strip('{}').split(';')
            check = False
            for course_temp in courses:
                for did in course_did:
                    if course_temp in did[0] and len(did) == 8:
                        if did[4] == None or did[4] >= 50:
                            did.append(branchName)
                            curr_uoc += did[6]
                        check = True
                if check:
                    break
            if not check:
                remaining.append(course)


    if rule[5] not in ("CC", "PE"):
        remaining = []
    if rule[5] == 'PE' and branchType == 'pattern':
        remaining = courses

    return {"remaining" : remaining,
            "curr_uoc" : curr_uoc,
            "min_req" : min_req,
            "max_req" : max_req}

# set up some globals

usage = f"Usage: {sys.argv[0]} zID [Program Stream]"
db = None

# process command-line args

argc = len(sys.argv)
if argc < 2:
    print(usage)
    exit(1)
zid = sys.argv[1]
if zid[0] == 'z':
    zid = zid[1:8]
digits = re.compile("^\d{7}$")
if not digits.match(zid):
    print("Invalid student ID")
    exit(1)

progCode = None
strmCode = None

if argc == 4:
    progCode = sys.argv[2]
    strmCode = sys.argv[3]

# manipulate database

try:
    db = psycopg2.connect("dbname=mymyunsw")
    stuInfo = getStudent(db, zid)
    # print(stuInfo) # debug
    if not stuInfo:
        print(f"Invalid student id {zid}")
        exit()

    if progCode:
        progInfo = getProgram(db, progCode)
        if not progInfo:
            print(f"Invalid program code {progCode}")
            exit()

    if strmCode:
        strmInfo = getStream(db, strmCode)
        if not strmInfo:
            print(f"Invalid program code {strmCode}")
            exit()


    # if have a program/stream show progression check on supplied program/stream
    # else show progression check on most recent program/stream enrolment
    cur = db.cursor()
    cur.execute("select s.code, s.name, c_e.student, t.code, c_e.mark, c_e.grade, s.uoc, c.id \
                            from subjects s                                             \
                            JOIN courses c ON c.subject = s.id                          \
                            JOIN course_enrolments c_e ON c_e.course = c.id             \
                            JOIN terms t ON t.id = c.term                               \
                            where c_e.student = %s                                      \
                            order by t.code, s.code, c.id", [zid])
    result = cur.fetchall()

    completed = []
    for each in result:
        completed.append(list(each))
    # print(completed)

    remained = []

    if progCode == None and strmCode == None:
        cur.execute("select p_e.program, s.code from program_enrolments p_e \
                JOIN stream_enrolments s_e ON s_e.partof = p_e.id           \
                JOIN streams s ON s.id = s_e.stream                         \
                where p_e.student = %s", [zid])
        result = cur.fetchone()
        progInfo = getProgram(db, str(result[0]))
        strmInfo = getStream(db, result[1])
        progCode = result[0]
        strmCode = result[1]

    print(f'{zid} {stuInfo[1]}, {stuInfo[2]}')
    print('  ' + progInfo[1] + ' ' + progInfo[2] + '\n  ' + strmInfo[1] + ' ' + strmInfo[2] + '\n')

    # Stream rules
    rule_list = []
    cur.execute("select r.name, r.min_req, r.max_req, aog.defby, aog.definition, r.type, r.id \
                from streams s                                                          \
                JOIN stream_rules ON stream_rules.stream = s.id                         \
                JOIN rules r ON r.id = stream_rules.rule                                \
                JOIN academic_object_groups aog ON aog.id = r.ao_group                  \
                where s.code = %s", [strmCode])
    stream_result = cur.fetchall()
    for tup in stream_result:
        rule_list.append(tup)

    # Other rules
    cur.execute("select r.name, r.min_req, r.max_req, aog.defby, aog.definition, r.type, r.id \
                from program_rules p_r                                                  \
                JOIN rules r ON r.id = p_r.rule                                         \
                JOIN academic_object_groups aog ON aog.id = r.ao_group                  \
                where p_r.program = %s", [progCode])
    result = cur.fetchall()
    for rule in result:
        if rule[5] == 'DS' and strmCode in rule[4]:
            continue
        rule_list.append(rule)

    # Order by Rules.id
    # rule_list.sort(key=lambda x: x[6])
    # Check in order (CC, PE, FE, GE)
    for rule in rule_list:
        if rule[5] == 'CC':
            read_rule(completed, remained, rule)
    for rule in rule_list:
        if rule[5] == 'PE':
            read_rule(completed, remained, rule)
    for rule in rule_list:
        if rule[5] == 'GE':
            read_rule(completed, remained, rule)
    for rule in rule_list:
        if rule[5] == 'FE':
            read_rule(completed, remained, rule)


    print('Completed:')

    uoc = 0
    for course in completed:
        if len(course) == 9:
            uoc += course[6]
        if course[4] == None:
            course[4] = '-'
        elif course[4] < 50: # fail case
            print("{:<9}{:<5}{:<31}{:>4}{:>3}   fail does not count".format(course[0], course[3], course[1], course[4], course[5]))
            continue
        print("{:<9}{:<5}{:<31}{:>4}{:>3}   {}{:<15}".format(course[0], course[3], course[1], course[4], course[5] if course[5] else '-', course[6] if len(course) == 9 else 0, 'uoc towards ' + course[8] if len(course) == 9 else 'uoc does not satisfy any rule'))
    print(f'UOC = {uoc} so far')


    # for i in remained:
    #     print(i)
    check_satisfied = 0
    for tup in remained:
        min_req = tup[3]
        max_req = tup[4]
        curr_uoc = tup[2]
        if min_req == None and max_req == None and tup[1] == []:
            check_satisfied += 1
        elif min_req and curr_uoc >= min_req:
            check_satisfied += 1

    if check_satisfied == len(remained):
        print('\nEligible to graduate')
    else:
        print("\nRemaining to complete degree:")
        for tup in remained:
            min_req = tup[3]
            max_req = tup[4]
            curr_uoc = tup[2]
            if tup[5] == 'CC':
                for course in tup[1]:
                    print('- ', end='')
                    if ';' not in course:
                        cur.execute("select name from subjects where code = %s", [course])
                        result = cur.fetchone()
                        if result == None:
                            print(course, "???")
                        else:
                            print(course, result[0])
                    else:
                        course = course.strip('{}').split(';')
                        for i in range(len(course)):
                            cur.execute("select name from subjects where code = %s", [course[i]])
                            result = cur.fetchone()
                            if result == None:
                                print(course, "???")
                            else:
                                print(course[i], result[0])
                            if i != len(course)-1:
                                print('  or ', end='')
            else:
                if tup[5] == 'GE' and min_req-curr_uoc > 0:
                    print(f'{min_req-curr_uoc} UOC of General Education')
                elif min_req and max_req == None and curr_uoc < min_req:
                    if 'Free Electives' in tup[0]:
                        print(f'at least {min_req-curr_uoc} UOC of Free Electives')
                    else:
                        print(f'at least {min_req-curr_uoc} UOC courses from {tup[0]}')
                elif min_req and max_req and curr_uoc < min_req:
                    print(f'{max_req - curr_uoc} UOC from {tup[0]}')
                elif min_req and max_req and curr_uoc < max_req:
                    print(f'between {curr_uoc-min_req} and {max_req-curr_uoc} UOC courses from {tup[0]}')



except Exception as err:
    print("DB error: ", err)
finally:
    if db:
        db.close()
